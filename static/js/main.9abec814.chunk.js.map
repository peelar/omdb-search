{"version":3,"sources":["hooks/useDebounce.ts","api/axios.ts","api/fetcher.ts","hooks/useSearch.ts","components/Results/Results.tsx","components/Search/Search.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","instance","axios","create","baseURL","params","apikey","process","fetcher","phrase","get","s","then","res","data","useSearch","useSWR","error","results","isLoading","isError","Results","map","result","index","Title","Search","setValue","isResponseEmpty","Response","onSubmit","e","preventDefault","type","onChange","target","placeholder","onClick","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oKAoBeA,EAjBK,SAACC,EAAeC,GAA2B,IAAD,EAChBC,mBAASF,GADO,mBACrDG,EADqD,KACrCC,EADqC,KAc5D,OAXAC,qBAAU,WACM,KAAVL,GAAcI,EAAkBJ,GACpC,IAAMM,EAAUC,YAAW,WACzBH,EAAkBJ,KACjBC,GAEH,OAAO,WACLO,aAAaF,MAEd,CAACN,EAAOC,IAEJE,G,gBCRMM,E,OAPEC,EAAMC,OAAO,CAC5BC,QAAS,yBACTC,OAAQ,CACNC,OAAQC,aCAGC,EAHC,SAACC,GAAD,OACdP,EAAMQ,IAAI,GAAI,CAAEL,OAAQ,CAAEM,EAAGF,KAAYG,MAAK,SAACC,GAAD,OAASA,EAAIC,SCoB9CC,EAZG,SAACN,GAAqC,IAAD,EAC7BO,aACtB,kCAAgBP,MAChB,kBAAMD,EAAQC,MAFRK,EAD6C,EAC7CA,KAAMG,EADuC,EACvCA,MAId,MAAO,CACLC,QAASJ,EACTK,WAAYF,IAAUH,EACtBM,QAASH,I,OCPEI,EAVuC,SAAC,GAAiB,IAAfH,EAAc,EAAdA,QACvD,OACE,6BACGA,EAAQI,KAAI,SAACC,EAAQC,GAAT,OACX,6BAA6BD,EAAOE,OAApC,iBAAmBD,UCgCZE,EAjCU,WAAO,IAAD,EACHhC,mBAAS,IADN,mBACtBF,EADsB,KACfmC,EADe,KAEvBhC,EAAiBJ,EAAYC,EAAO,KAFb,EAGWuB,EAAUpB,GAA1CuB,EAHqB,EAGrBA,QAASE,EAHY,EAGZA,QAASD,EAHG,EAGHA,UAEpBS,EACe,KAAnBjC,GAA+C,WAAf,OAAPuB,QAAO,IAAPA,OAAA,EAAAA,EAASW,UAMpC,OACE,gCACE,uBAAMC,SAAU,SAACC,GAAD,OAAOA,EAAEC,kBAAzB,UACE,uBACEC,KAAK,OACLC,SAAU,SAACH,GAAD,OAAOJ,EAASI,EAAEI,OAAO3C,QACnCA,MAAOA,EACP4C,YAAY,eAEd,wBAAQH,KAAK,SAASI,QAbd,WACZV,EAAS,KAYL,0BAIDR,GAAa,4CACbC,GAAW,wCACXQ,GAAmB,6CACZ,OAAPV,QAAO,IAAPA,OAAA,EAAAA,EAASQ,SAAU,cAAC,EAAD,CAASR,QAASA,EAAQQ,aCtBrCY,EATH,WACV,OACE,sBAAKC,UAAU,MAAf,UACE,6CACA,cAAC,EAAD,QCQSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCJdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9abec814.chunk.js","sourcesContent":["// credits go to: https://github.com/vercel/swr/issues/110#issuecomment-552637429\nimport { useState, useEffect } from \"react\";\n\nconst useDebounce = (value: string, delay: number): string => {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(() => {\n    if (value === \"\") setDebouncedValue(value);\n    const handler = setTimeout(() => {\n      setDebouncedValue(value);\n    }, delay);\n\n    return () => {\n      clearTimeout(handler);\n    };\n  }, [value, delay]);\n\n  return debouncedValue;\n};\n\nexport default useDebounce;\n","import axios from \"axios\";\n\nconst instance = axios.create({\n  baseURL: \"http://www.omdbapi.com\",\n  params: {\n    apikey: process.env.REACT_APP_AUTH_KEY,\n  },\n});\n\nexport default instance;\n","import axios from \"../api/axios\";\n\nconst fetcher = (phrase: string) =>\n  axios.get(\"\", { params: { s: phrase } }).then((res) => res.data);\n\nexport default fetcher;\n","import { OMDBSearchResponse } from \"./../../types\";\nimport useSWR from \"swr\";\nimport fetcher from \"../api/fetcher\";\nimport { AxiosError } from \"axios\";\n\ntype UseSearchValues = {\n  results: OMDBSearchResponse | undefined;\n  isLoading: boolean;\n  isError: AxiosError<any> | undefined;\n};\n\nconst useSearch = (phrase: string): UseSearchValues => {\n  const { data, error } = useSWR<OMDBSearchResponse, AxiosError>(\n    () => `search/${phrase}`,\n    () => fetcher(phrase)\n  );\n  return {\n    results: data,\n    isLoading: !error && !data,\n    isError: error,\n  };\n};\n\nexport default useSearch;\n","import { SearchEntry } from \"../../../types\";\n\nconst Results: React.FC<{ results: SearchEntry[] }> = ({ results }) => {\n  return (\n    <ul>\n      {results.map((result, index) => (\n        <li key={`result-${index}`}>{result.Title}</li>\n      ))}\n    </ul>\n  );\n};\n\nexport default Results;\n","import { useState } from \"react\";\nimport useDebounce from \"../../hooks/useDebounce\";\nimport useSearch from \"../../hooks/useSearch\";\nimport Results from \"../Results/Results\";\n\nconst Search: React.FC = () => {\n  const [value, setValue] = useState(\"\");\n  const debouncedValue = useDebounce(value, 1000);\n  const { results, isError, isLoading } = useSearch(debouncedValue);\n\n  const isResponseEmpty =\n    debouncedValue !== \"\" && results?.Response === \"False\";\n\n  const clear = () => {\n    setValue(\"\");\n  };\n\n  return (\n    <div>\n      <form onSubmit={(e) => e.preventDefault()}>\n        <input\n          type=\"text\"\n          onChange={(e) => setValue(e.target.value)}\n          value={value}\n          placeholder=\"Enter text\"\n        />\n        <button type=\"button\" onClick={clear}>\n          Clear [X]\n        </button>\n      </form>\n      {isLoading && <h2>Loading...</h2>}\n      {isError && <h2>Woops!</h2>}\n      {isResponseEmpty && <h2>No data :(</h2>}\n      {results?.Search && <Results results={results.Search} />}\n    </div>\n  );\n};\n\nexport default Search;\n","import Search from \"./components/Search/Search\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <h1>OMDB Search</h1>\n      <Search />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}